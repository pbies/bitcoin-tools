#!/usr/bin/env python3

from hdwallet import HDWallet
from hdwallet.cryptocurrencies import Bitcoin as BTC
from hdwallet.hds import BIP32HD
from multiprocessing import Pool
from tqdm import tqdm
import base58
import hashlib
import os
import sys

ran=int(1e6)

a=[]
a.append(0x1000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0x2000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0x3000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0x4000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0x5000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0x6000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0x7000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0x8000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0x9000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0xa000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0xb000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0xc000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0xd000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0xe000000000000000000000000000000000000000000000000000000000000000-ran)
a.append(0xf000000000000000000000000000000000000000000000000000000000000000-ran)

b=[]
b.append(0x1000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0x2000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0x3000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0x4000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0x5000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0x6000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0x7000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0x8000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0x9000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0xa000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0xb000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0xc000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0xd000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0xe000000000000000000000000000000000000000000000000000000000000000+ran+1)
b.append(0xf000000000000000000000000000000000000000000000000000000000000000+ran+1)


def int_to_bytes4(number, length): # in: int, int
	# length = zero-fill bytes
	return number.to_bytes(length,'big')


def pvk_to_wif2(key_hex):
	return base58.b58encode_check(b'\x80' + bytes.fromhex(key_hex)).decode()


o=open('output.txt','w')


def go(x):
	h=hex(x)[2:].zfill(64)
	#print(h)
	try:
		hdwallet = HDWallet(cryptocurrency=BTC, hd=BIP32HD).from_private_key(private_key=h)
	except Exception as e:
		print(f'Error: {e} @ {h}', file=sys.stderr)
		exit()

	pvk=hdwallet.private_key()
	wif=pvk_to_wif2(pvk)
	w=f'{pvk}\n{wif}\n{hdwallet.wif()}\n{hdwallet.address("P2PKH")}\n{hdwallet.address("P2SH")}\n{hdwallet.address("P2TR")}\n{hdwallet.address("P2WPKH")}\n{hdwallet.address("P2WPKH-In-P2SH")}\n{hdwallet.address("P2WSH")}\n{hdwallet.address("P2WSH-In-P2SH")}\n\n'
	o.write(w)
	o.flush()


if __name__ == "__main__":
	os.system('cls' if os.name == 'nt' else 'clear')
	th=24
	#r=range(start, end)
	i=0
	cnt=1000
	for p, q in zip(a, b):
		print(f'{hex(p)}\n{hex(q)}')
		r=range(p, q)
		with Pool(processes=th) as p, tqdm(total=len(r)) as pbar:
			for result in p.imap_unordered(go, r, chunksize=1000):
				i=i+1
				if i%cnt==0:
					pbar.update(cnt)
					pbar.refresh()

	print('\a', end='', file=sys.stderr)
